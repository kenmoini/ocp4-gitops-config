apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sso
    component: database
    app.kubernetes.io/part-of: sso
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: database
    app.openshift.io/runtime: postgresql
  name: sso-postgresql
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: sso
      component: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sso
        component: database
      name: keycloak-postgresql
      namespace: test-sso
    spec:
      containers:
        - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USERNAME
                  name: sso-db-secret
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: sso-db-secret
            - name: POSTGRESQL_DATABASE
              value: root
          image: registry.redhat.io/rhel8/postgresql-10:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: keycloak-postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: sso-postgresql-claim
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: sso-postgresql-claim
          persistentVolumeClaim:
            claimName: sso-postgresql-claim
